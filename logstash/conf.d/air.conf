input {
	file {
		path => "/opt/du_sftp/SFTP_rcv/air/*.json"
		start_position	=> "beginning"
		sincedb_path => "/var/lib/logstash/air_cdr_sincedb"
		type => "air"
		codec => "json"
		mode => "read"
		file_completed_action => "log_and_delete"
    file_completed_log_path => "/var/log/logstash/air_completed_files.log"
		max_open_files => 50
	}
}

filter {
	if [type] == "air" {
		if [refillRecordV2]  {
			mutate {
				rename => {
					"[refillRecordV2][refillProfileID]" => "refillProfileID"
				}
				rename => {
					"[refillRecordV2][timeStamp]" => "eventTime"
				}
				rename => {
					"[refillRecordV2][originTimeStamp]" => "triggerTime"
				}
				rename => {
					"[refillRecordV2][subscriberNumber]" => "subscriber"
				}
				rename => {
					"[refillRecordV2][accountInformationBeforeRefill][accountBalance]" => "accountBalance_beforeRefill"
				}
				rename => {
					"[refillRecordV2][accountInformationAfterRefill][accountBalance]" => "accountBalance_afterRefill"
				}
				rename => {
					"[refillRecordV2][accountInformationBeforeRefill][offers][0][attributeInformation]" => "attributeInformation_bef"
				}
				rename => {
					"[refillRecordV2][accountInformationAfterRefill][offers][0][attributeInformation]" => "attributeInformation_aft"
				}
			}
			ruby {
				code => "
					if !event.get('attributeInformation_bef').nil?
						event.get('attributeInformation_bef').each { |elem|
							if !elem['attributeName'].nil?
			          if elem['attributeName'] == 'POID' and !elem['attributeValue'].nil? and !elem['attributeValue'][0].nil? and !elem['attributeValue'][0]['string'].nil?
			            event.set('poID_beforeRefill', elem['attributeValue'][0]['string'])
			          end
							end
		        };
					end
					if !event.get('attributeInformation_aft').nil?
						event.get('attributeInformation_aft').each { |elem|
							if !elem['attributeName'].nil?
			          if elem['attributeName'] == 'POID' and !elem['attributeValue'].nil? and !elem['attributeValue'][0].nil? and !elem['attributeValue'][0]['string'].nil?
			            event.set('poID_afterRefill', elem['attributeValue'][0]['string'])
			          end
							end
		        };
					end
				"
			}
			date {
		                match => ['eventTime', 'yyyyMMddHHmmssZ']
		                target => 'eventTime'
		        }
		        date {
		                match => ['triggerTime', 'yyyyMMddHHmmssZ']
		                target => 'triggerTime'
		        }
			mutate {
				rename => { "triggerTime" => "date_time" }
			}
			mutate {
				remove_field => [
					"host",
					"path",
					"refillRecordV2",
					"attributeInformation_aft",
					"attributeInformation_bef"
				]
			}
		}
		else {
			drop {}
		}
	}
}

output {
	if [type] == "air" {
		elasticsearch {
			hosts => "localhost"
			index => "charging_system_air-%{+YYYY.ww}"
			document_type => "logs"
		}
	}
}
