input {
	file {
		path => "/opt/du_sftp/SFTP_rcv/sdp/*json"
		start_position	=> "beginning"
		sincedb_path => "/var/lib/logstash/sdp_cdr_sincedb"
		type => "sdp"
		codec => "json"
		mode => "read"
		file_completed_action => "log_and_delete"
    file_completed_log_path => "/var/log/logstash/sdp_completed_files.log"
		max_open_files => 50
	}
}

filter {
	if [type] == "sdp" {
		if [onlineCreditControlRecord]  {
			mutate {
				rename => {
					"[onlineCreditControlRecord][servedSubscriptionID][0][subscriptionIDValue]" => "subscriber"
				}
				rename => {
					"[onlineCreditControlRecord][creditControlRecords][0][triggerTime]" => "triggerTime"
				}
				rename => {
					"[onlineCreditControlRecord][creditControlRecords][0][eventTime]" => "eventTime"
				}
				rename => {
					"[onlineCreditControlRecord][nodeName]" => "nodeName"
				}
				rename => {
					"[onlineCreditControlRecord][serviceContextID]" => "serviceContextID"
				}
				rename => {
					"[onlineCreditControlRecord][correlationID][callReference]" => "callReference"
				}
				rename => {
					"[onlineCreditControlRecord][creditControlRecords][0][usedServiceUnits][0][timeUnit]" => "timeUnit"
				}
				rename => {
					"[onlineCreditControlRecord][creditControlRecords][0][tariffInfo][0]" => "tariffInfo"
				}
				rename => {
					"[onlineCreditControlRecord][creditControlRecords][0][cCAccountData][serviceClassID]" => "serviceClassID"
				}
				rename => {
					"[onlineCreditControlRecord][creditControlRecords][0][cCAccountData][accountValueDeducted]" => "accountValueDeducted"
				}
				rename => {
					"[onlineCreditControlRecord][creditControlRecords][0][cCAccountData][accountValueAfter]" => "accountValueAfter"
				}
				rename => {
					"[onlineCreditControlRecord][creditControlRecords][0][cCAccountData][accountValueBefore]" => "accountValueBefore"
				}
				rename => {
					"[onlineCreditControlRecord][creditControlRecords][0][cCAccountData][accumulatedCost]" => "accumulatedCost"
				}
				rename => {
					"[onlineCreditControlRecord][creditControlRecords][0][chargingContextSpecific]" => "chargingContextSpecific"
				}
				rename => {
					"[onlineCreditControlRecord][creditControlRecords][0][cCAccountData][specifiedConsumptions][0][offerID]" => "offerID"
				}
				rename => {
		        		"[onlineCreditControlRecord][creditControlRecords][0][treeDefinedFields]" => "treeDefinedFields"
		        	}
				rename => {
					"[onlineCreditControlRecord][creditControlRecords][0][cCAccountData][specifiedConsumptions][0][offerAttributes]" => "offerAttributes"
				}
			}
			ruby {
				code => "
					if !event.get('treeDefinedFields').nil?
						event.get('treeDefinedFields').each { |elem|
							if !elem['parameterID'].nil?
								if elem['parameterID'] == 'Traffic' and !elem['parameterValue'].nil? and !elem['parameterValue']['string'].nil?
									event.set('traffic', elem['parameterValue']['string'])
								elsif elem['parameterID'] == 'IntlZone' and !elem['parameterValue'].nil? and !elem['parameterValue']['string'].nil?
									event.set('IntlZone', elem['parameterValue']['string'])
								end
							end
						};
					end
					if !event.get('chargingContextSpecific').nil?
						event.get('chargingContextSpecific').each { |elem|
							if !elem['parameterID'].nil? and !elem['parameterValue'].nil? and !elem['parameterValue']['partyInformation'].nil? and elem['parameterID'] == '16778219'
								event.set('bmsisdn', elem['parameterValue']['partyInformation']['msisdn'])
							end
						};
					end
					if !event.get('offerAttributes').nil?
						event.get('offerAttributes').each { |elem|
				      if !elem['attributeName'].nil? and !elem['attributeValueString'].nil? and elem['attributeName'] == 'POID'
			          event.set('poID', elem['attributeValueString'])
				      end
			      };
					end
					if !event.get('accountValueDeducted').nil? and !event.get('[accountValueDeducted][amount]').nil? and !event.get('[accountValueDeducted][decimals]').nil?
						event.set('[accountValueDeducted][amount]', event.get('[accountValueDeducted][amount]').to_i / (10**event.get('[accountValueDeducted][decimals]').to_i))
					end
					if !event.get('accountValueAfter').nil? and !event.get('[accountValueAfter][amount]').nil? and !event.get('[accountValueAfter][decimals]').nil?
						event.set('[accountValueAfter][amount]', event.get('[accountValueAfter][amount]').to_i / (10**event.get('[accountValueAfter][decimals]').to_i))
					end
					if !event.get('accountValueBefore').nil? and !event.get('[accountValueBefore][amount]').nil? and !event.get('[accountValueBefore][decimals]').nil?
						event.set('[accountValueBefore][amount]', event.get('[accountValueBefore][amount]').to_i / (10**event.get('[accountValueBefore][decimals]').to_i))
					end
					if !event.get('accumulatedCost').nil? and !event.get('[accumulatedCost][amount]').nil? and !event.get('[accumulatedCost][decimals]').nil?
						event.set('[accumulatedCost][amount]', event.get('[accumulatedCost][amount]').to_i / (10**event.get('[accumulatedCost][decimals]').to_i))
					end
				"
			}
			date {
				match => ['eventTime', 'yyyyMMddHHmmssZ']
				target => 'eventTime'
			}
			date {
				match => ['triggerTime', 'yyyyMMddHHmmssZ']
				target => 'triggerTime'
			}
			mutate {
		    rename => { "triggerTime" => "date_time" }
		  }
			mutate {
				remove_field => [
					"host",
					"path",
					"treeDefinedFields",
					"offerAttributes",
					"chargingContextSpecific",
					"[accountValueDeducted][decimals]",
					"[accountValueAfter][decimals]",
					"[accountValueBefore][decimals]",
					"onlineCreditControlRecord"
				]
			}
		}
		else {
			drop {}
		}
	}
}

output {
	if [type] == "sdp" {
		elasticsearch {
			hosts => "localhost"
			index => "charging_system_sdp-%{+YYYY.ww}"
			document_type => "logs"
		}
	}
}
